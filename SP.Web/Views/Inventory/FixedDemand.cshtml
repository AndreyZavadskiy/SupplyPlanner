@model SP.Web.ViewModels.InventoryProcessingViewModel

@{
    ViewData["Title"] = "Demand";
    bool isAdminRole = this.User.IsInRole("Administrator");
}

<h1>Плановая поставка</h1>

<section>
    <div class="zero-gutters col-xl-12">
        <div class="form-row zero-gutters">
            <div class="form-group row col-4">
                <label asp-for="ProcessingDate" class="control-label col-6"></label>
                <input asp-for="ProcessingDate" type="date" class="form-control col-6" readonly="readonly"/>
                <span asp-validation-for="ProcessingDate" class="text-danger"></span>
            </div>
        </div>
        <div class="form-row zero-gutters" style="display: none;">
            <div class="form-group row form-check col-8">
                <input id="WithBalances" type="checkbox" class="col-1" />
                Учитывать остатки для ТМЦ с СПИ более 12 месяцев
            </div>
        </div>
    </div>

    <div class="col-xl-12">
        <table id="DemandGrid" class="table table-striped table-bordered nowrap" width="100%" cellspacing="0">
            <thead>
                <tr>
                    <th><input type="checkbox" class="selectAll" /></th>
                    <th></th>
                    <th class="exportable-column">Код Номенклатуры</th>
                    <th class="exportable-column">Наименование</th>
                    <th class="exportable-column">АЗС</th>
                    <th class="exportable-column">Остаток</th>
                    <th class="exportable-column">Ед.изм.</th>
                    <th class="exportable-column">Фикс. значение</th>
                    <th class="exportable-column">Формула</th>
                    <th class="exportable-column">План</th>
                    <th class="exportable-column">Посл.заказ</th>
                    <th class="exportable-column">Дата заказа</th>
                </tr>
            </thead>
        </table>
    </div>
</section>
<section>
    <div class="modal" id="FilterModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Фильтры</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body filter-area">
                    <div class="col-12">
                        <div class="form-row zero-gutters">
                            <div class="form-group row col-12">
                                <label for="RegionList" class="control-label zero-gutters col-3">Регион</label>
                                <select id="RegionList" multiple="multiple" data-placeholder="Выберите регионы..."
                                        asp-items="ViewBag.RegionList"
                                        onchange="changeRegion();">
                                </select>
                                <a title="Выделить все" onclick="chosenSelectAll('RegionList');"><img src="/images/check-all.svg" class="icon-button" /></a>
                                <a title="Снять все" onclick="chosenDeselectAll('RegionList');"><img src="/images/x.svg" class="icon-button" /></a>
                            </div>
                            <div class="form-group row col-12">
                                <label for="TerritoryList" class="control-label zero-gutters col-3">Территория</label>
                                <select id="TerritoryList" multiple="multiple" data-placeholder="Выберите территории..."
                                        onchange="changeTerritory();">
                                </select>
                                <a title="Выделить все" onclick="chosenSelectAll('TerritoryList');"><img src="/images/check-all.svg" class="icon-button" /></a>
                                <a title="Снять все" onclick="chosenDeselectAll('TerritoryList');"><img src="/images/x.svg" class="icon-button" /></a>
                            </div>
                            <div class="form-group row col-12">
                                <label for="GasStationList" class="control-label zero-gutters col-3">АЗС</label>
                                <select id="GasStationList" multiple="multiple" data-placeholder="Выберите АЗС..."></select>
                                <a title="Выделить все" onclick="chosenSelectAll('GasStationList');"><img src="/images/check-all.svg" class="icon-button" /></a>
                                <a title="Снять все" onclick="chosenDeselectAll('GasStationList');"><img src="/images/x.svg" class="icon-button" /></a>
                            </div>
                            <div class="form-group row col-12">
                                <label for="NomenclatureGroupList" class="control-label zero-gutters col-3">Группа номенклатуры</label>
                                <select id="NomenclatureGroupList" multiple="multiple" data-placeholder="Выберите группу..."
                                        asp-items="ViewBag.NomenclatureGroupList"
                                        onchange="loadNomenclature();">
                                </select>
                                <a title="Выделить все" onclick="chosenSelectAll('NomenclatureGroupList');"><img src="/images/check-all.svg" class="icon-button" /></a>
                                <a title="Снять все" onclick="chosenDeselectAll('NomenclatureGroupList');"><img src="/images/x.svg" class="icon-button" /></a>
                            </div>
                            <div class="form-group row col-12">
                                <label for="NomenclatureList" class="control-label zero-gutters col-3">Номенклатура</label>
                                <select id="NomenclatureList" multiple="multiple" data-placeholder="Выберите позицию номенклатуры..."></select>
                                <a title="Выделить все" onclick="chosenSelectAll('NomenclatureList');"><img src="/images/check-all.svg" class="icon-button" /></a>
                                <a title="Снять все" onclick="chosenDeselectAll('NomenclatureList');"><img src="/images/x.svg" class="icon-button" /></a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer form-row button-row">
                    <button type="button" class="btn btn-primary" onclick="applyFilter();">Применить и закрыть</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
</section>
<section>
    <input id="serviceKey" type="hidden" />

    <div class="modal js-loading-bar" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Расчет потребности</h5>
                </div>
                <div class="modal-body">
                    <div class="progress-step"></div>
                    <div class="progress" style="height: 20px;">
                        <div class="progress-bar" role="progressbar"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" data-dismiss="modal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
</section>
<section>
    <div class="modal" id="DemandModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Параметры заказа</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="col-12">
                        <div class="form-row zero-gutters">
                            <div class="form-group row col-12">
                                <label for="FixedAmount" class="control-label zero-gutters col-3">Фикс.значение</label>
                                <input id="FixedAmount" class="form-control col-6" />
                            </div>
                            <div class="form-group row col-12">
                                <label for="Formula" class="control-label zero-gutters col-3">Формула</label>
                                <textarea id="Formula" class="form-control col-9" rows="3"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer form-row button-row">
                    <button type="button" class="btn btn-primary" onclick="savePlan();">Сохранить и закрыть</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts
{
    <script>
        var intervalId;
        var selectedOrders;

        $(document).ready(function() {
            $('#RegionList').chosen({ width: '450px' });
            $('#TerritoryList').chosen({ width: '450px' });
            $('#GasStationList').chosen({ width: '450px' });
            $('#NomenclatureGroupList').chosen({ width: '450px' });
            $('#NomenclatureList').chosen({ width: '450px' });

            var d = new Date();
            var todayString = ("0" + d.getDate()).slice(-2) + "." + ("0" + (d.getMonth() + 1)).slice(-2) + "." + d.getFullYear();
            $('#DemandGrid').DataTable({
                language: {
                    url: '/lib/datatables/i18n/dt-russian.json'
                },
                rowId: 'id',
                select: {
                    style: 'multi',
                    selector: 'td:first-child'
                },
                lengthMenu: [
                    [10, 25, 50, 100, -1],
                    [10, 25, 50, 100, 'Все']
                ],
                scrollX: true,
                processing: true,
                ajax: {
                    url: '/Inventory/LoadDemandList',
                    type: 'POST',
                    data: function(d) {
                        d.regions = $('#RegionList').val().join();
                        d.terrs = $('#TerritoryList').val().join();
                        d.stations = $('#GasStationList').val().join();
                        d.groups = $('#NomenclatureGroupList').val().join();
                        d.noms = $('#NomenclatureList').val().join();
                        d.shortuse = true;
                    },
                    dataType: 'json'
                },
                columns: [
                    { defaultContent: '' },
                    {
                        render: function(data, type, full, meta) {
                            return '<a onclick="changeSingleOrder(' + full.id + ');"><img src="/images/pencil-square.svg"/></a>';
                        }
                    },
                    { data: 'code' },
                    { data: 'name' },
                    { data: 'gasStationName' },
                    { data: 'quantity' },
                    { data: 'measureUnitName' },
                    { data: 'fixedAmount' },
                    { data: 'formula' },
                    { data: 'plan' },
                    { data: 'lastQuantity' },
                    { data: 'lastOrderDate' }
                ],
                columnDefs: [
                    {
                        targets: 'hidden-column',
                        visible: false
                    },
                    {
                        targets: 0,
                        data: null,
                        orderable: false,
                        sorting: false,
                        className: 'select-checkbox',
                        width: '1.5em'
                    },
                    {
                        targets: 1,
                        orderable: false,
                        sorting: false,
                        width: '1em'
                    },
                    {
                        targets: 11,
                        render: $.fn.dataTable.render.moment('YYYY-MM-DDTHH:mm:ss.SSSSSS', 'DD.MM.YYYY HH:mm')
                    }
                ],
                dom:
                    "<'row'<'col-sm-12 col-md-12 dt-action-group'B>>" +
                        "<'row'<'col-sm-12 col-md-4'l><'col-sm-12 col-md-4'i><'col-sm-12 col-md-4'f>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-12 col-md-6 left-pagination'p>>",
                buttons: [
                    {
                        text: 'Рассчитать план',
                        titleAttr: 'Сделать план заказа ТМЦ по формулам',
                        className: 'dt-action-button btn btn-primary',
                        action: function () {
                            calcDemand();
                        }
                    },
                    {
                        text: 'Плановая поставка',
                        titleAttr: 'Плановая поставка ТМЦ с СПИ не более 12 месяцев',
                        className: 'dt-action-button btn btn-primary fixed-order',
                        action: function () {
                            makeOrder(2);
                        }
                    },
                    @if (isAdminRole)
                    {
                        <text>
                            {
                                text: 'Изменить формулы',
                                titleAttr: 'Изменить формулы заказа ТМЦ',
                                className: 'dt-action-button btn btn-primary',
                                action: function() {
                                    changeOrders();
                                }
                            },
                        </text>
                    }
                    {
                        text: 'Перейти к списку заказов',
                        className: 'dt-action-button btn btn-success',
                        action: function() {
                            window.location = '@Url.Action("Order", "Inventory")';
                        }
                    },
                    {
                        text: 'Excel',
                        titleAttr: "Выгрузить таблицу в Excel",
                        className: 'dt-action-button',
                        extend: 'excel',
                        title: 'Потребность ТМЦ',
                        messageTop: 'Дата выгрузки ' + todayString,
                        exportOptions: {
                            columns: '.exportable-column',
                            modifier: { search: 'applied' },
                            grouped_array_index: [4]
                        }
                    },
                    {
                        text: 'Фильтры',
                        className: 'dt-action-button filter-button',
                        action: function(e, dt, node, config) {
                            $('#FilterModal').modal({
                                backdrop: 'static',
                                keyboard: false
                            });
                        }
                    }
                ]
            });
            var dt = $('#DemandGrid').DataTable();
            // select all checkbox
            $(".selectAll").on("click",
                function (e) {
                    if ($(this).is(":checked")) {
                        dt.rows({ search: "applied" }).select();
                    } else {
                        dt.rows().deselect();
                    }
                });
            $('.js-loading-bar').modal({
                backdrop: 'static',
                show: false
            });
        });

        function changeRegion() {
            var terrList = $('#TerritoryList');
            var selectedRegions = $('#RegionList').val();
            var selectedTerrs = terrList.val().join();
            terrList.empty();
            if (selectedRegions.length === 0) {
                terrList.trigger("chosen:updated");
                terrList.trigger('change');
                return;
            }
            var url = '/Region/LoadTerritories';
            var requestData = { regions: selectedRegions.join() };
            $.get(url,
                requestData,
                function (data) {
                    $.each(data,
                        function (index, element) {
                            terrList.append($('<option>',
                                {
                                    value: element.id,
                                    text: element.name
                                }));
                        });

                    selectOptions(terrList, selectedTerrs);
                    terrList.trigger("chosen:updated");
                    terrList.trigger('change');
                });
        }

        function changeTerritory() {
            var regions = $('#RegionList').val();
            var terrs = $('#TerritoryList').val();
            var stationList = $("#GasStationList");
            stationList.empty();
            if (terrs === '') {
                stationList.trigger('change');
                return;
            }
            var url = '/Station/LoadStations';
            var requestData = {
                'regions': regions.join(),
                'terrs': terrs.join()
            };
            $.post(url,
                requestData,
                function (data) {
                    stationList.append($('<option>',
                        {
                            value: '',
                            text: '-- ВСЕ --'
                        }));
                    $.each(data,
                        function (index, element) {
                            stationList.append($('<option>',
                                {
                                    value: element.id,
                                    text: element.name
                                }));
                        });
                    stationList.trigger("chosen:updated");
                });
        }

        function loadNomenclature() {
            var nomList = $('#NomenclatureList');
            var selectedGroups = $('#NomenclatureGroupList').val();
            var selectedNoms = nomList.val().join();
            nomList.empty();
            if (selectedGroups.length === 0) {
                nomList.trigger("chosen:updated");
                nomList.trigger('change');
                return;
            }
            var url = '/Nomenclature/LoadNomenclature';
            var requestData = {
                groups: selectedGroups.join(),
                useful: '1'
            };
            $.get(url,
                requestData,
                function (data) {
                    $.each(data,
                        function (index, element) {
                            nomList.append($('<option>',
                                {
                                    value: element.id,
                                    text: element.name
                                }));
                        });

                    selectOptions(nomList, selectedNoms);
                    nomList.trigger("chosen:updated");
                    nomList.trigger('change');
                });
        }

        function chosenSelectAll(controlId) {
            $('#' + controlId + ' option').prop('selected', true);
            $('#' + controlId).trigger("chosen:updated");
            if (controlId === 'RegionList') changeRegion();
            else if (controlId === 'TerritoryList') changeTerritory();
        }

        function chosenDeselectAll(controlId) {
            $('#' + controlId + ' option').prop('selected', false);
            $('#' + controlId).trigger("chosen:updated");
        }

        function selectOptions(control, values) {
            if (values.length === 0) {
                $(control).val('');
                return;
            }

            var selected = values.split(',');
            $(control).val(selected);
        }

        function applyFilter() {
            $('#DemandGrid').DataTable().ajax.reload();
            var selectedCount = $('.filter-area option:selected[value!=""]').length;
            if (selectedCount > 0) $('.filter-button').addClass('filter-enabled');
            else $('.filter-button').removeClass('filter-enabled');
            $('#FilterModal').modal('hide');
        }

        function calcDemand() {
            var url = "/Inventory/CalcOrder";
            var dt = $("#DemandGrid").DataTable();
            var rows = dt.rows({ selected: true }).data();
            if (rows.length === 0) {
                rows = dt.rows().data();
            }
            var requestData = rows.pluck('id').toArray();

            $.ajax({
                url: url,
                data: JSON.stringify(requestData),
                contentType: 'application/json; charset=utf-8;',
                dataType: 'json',
                type: 'post',
                success: function(data) {
                    console.log(data.key);
                    $('input + span').text('');
                    $('#serviceKey').val(data.key);
                    $('.modal-footer').hide();
                    $('.js-loading-bar').modal('show');
                    intervalId = setInterval(function() {
                            updateProgress();
                        },
                        1000);
                }
            });
        }

        function updateProgress() {
            var keyValue = $('#serviceKey').val();
            console.log('progress on ' + keyValue);
            $.ajax({
                url: 'PeekStatus',
                data: 'key=' + keyValue,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                processData: false,
                type: 'get',
                success: function(data) {
                    $('.progress-step').text(data.step);
                    $('.progress-bar').width(data.progress + '%');
                    $('.progress-bar').text(data.progress.toFixed(0) + '%');
                    if (data.status > 2) {
                        clearInterval(intervalId);
                        $('#DemandGrid').DataTable().ajax.reload();
                        $('.log-textarea').val(data.log);
                        $('.modal-footer').show();
                    }
                }
            });
        }

        function changeOrders() {
            var dt = $("#DemandGrid").DataTable();
            var rows = dt.rows({ selected: true }).data();
            if (rows.length === 0) {
                rows = dt.rows().data();
            }
            selectedOrders = rows.pluck('id').toArray();
            openDemandModal();
        }

        function changeSingleOrder(id) {
            selectedOrders = [id];
            openDemandModal();
        }

        function openDemandModal() {
            if (!selectedOrders || selectedOrders.length === 0) return;
            var dt = $("#DemandGrid").DataTable();
            var data = dt.row('#' + selectedOrders[0]).data();
            $('#FixedAmount').val(data.fixedAmount);
            $('#Formula').val(data.formula);
            $('#DemandModal').modal({
                backdrop: 'static',
                show: true
            });
        }

        function savePlan() {
            var url = '/Inventory/Requirement';
            var requestData = {
                "fixedAmount": $('#FixedAmount').val(),
                "formula": $('#Formula').val(),
                "idList": selectedOrders
            };

            $.ajax({
                url: url,
                data: JSON.stringify(requestData),
                contentType: 'application/json; charset=utf-8;',
                dataType: 'json',
                type: 'post',
                success: function(result) {
                    if (result.updateCount === 0) {
                        alert('Изменения не сохранены. Проверьте правильность ввода данных.');
                        return;
                    }

                    var dt = $("#DemandGrid").DataTable();
                    selectedOrders.forEach(function(id) {
                        var row = dt.row('#' + id);
                        var data = row.data();
                        data.fixedAmount = result.fixedAmount;
                        data.formula = result.formula;
                        row.data(data).invalidate();
                    });
                    dt.rows().deselect();
                    dt.draw();
                    $('#DemandModal').modal('hide');
                }
            });
        }

        function makeOrder(orderType) {
            var withBalance = 'false';
            if ($('#WithBalances').is(':checked')) {
                withBalance = 'true';
            }
            var url = '/Inventory/SaveOrder?orderType=' + orderType + '&balance=' + withBalance;

            var dt = $('#DemandGrid').DataTable();
            var rows = dt.rows({ selected: true });
            if (rows.count() === 0) {
                alert('Выберите позиции Номенклатуры для заказа.');
                return;
            }
            var requestData = [];
            rows.every(function(rowIdx, tableLoop, rowLoop) {
                var data = this.data();
                requestData.push({
                    id: data.id,
                    plan: data.plan,
                    quantity: data.orderQuantity
                });
            });

            $.ajax({
                url: url,
                data: JSON.stringify(requestData),
                contentType: 'application/json; charset=utf-8;',
                dataType: 'json',
                type: 'post',
                success: function (result) {
                    alert('Создан заказ ' + result.order);
                }
            });
        }
    </script>
}
