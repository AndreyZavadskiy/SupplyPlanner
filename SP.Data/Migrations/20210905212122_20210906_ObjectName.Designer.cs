// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SP.Data;

namespace SP.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210905212122_20210906_ObjectName")]
    partial class _20210906_ObjectName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SP.Core.Log.ActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Category")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Action","log");
                });

            modelBuilder.Entity("SP.Core.Log.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EntityName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<long>("RecordId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Change","log");
                });

            modelBuilder.Entity("SP.Core.Master.CashRegisterTape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CashRegisterTape","dic");
                });

            modelBuilder.Entity("SP.Core.Master.CashboxLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CashboxLocation","dic");
                });

            modelBuilder.Entity("SP.Core.Master.ClientRestroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ClientRestroom","dic");
                });

            modelBuilder.Entity("SP.Core.Master.ManagementSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ManagementSystem","dic");
                });

            modelBuilder.Entity("SP.Core.Master.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MeasureUnit","dic");
                });

            modelBuilder.Entity("SP.Core.Master.NomenclatureGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("NomenclatureGroup","dic");
                });

            modelBuilder.Entity("SP.Core.Master.OperatorRoomFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("OperatorRoomFormat","dic");
                });

            modelBuilder.Entity("SP.Core.Master.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Segment","dic");
                });

            modelBuilder.Entity("SP.Core.Master.ServiceLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ServiceLevel","dic");
                });

            modelBuilder.Entity("SP.Core.Master.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Settlement","dic");
                });

            modelBuilder.Entity("SP.Core.Master.StationLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("StationLocation","dic");
                });

            modelBuilder.Entity("SP.Core.Master.StationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("StationStatus","dic");
                });

            modelBuilder.Entity("SP.Core.Master.TradingHallOperatingMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TradingHallOperatingMode","dic");
                });

            modelBuilder.Entity("SP.Core.Master.TradingHallSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TradingHallSize","dic");
                });

            modelBuilder.Entity("SP.Core.Model.CalcSheet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("FixedAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<int>("GasStationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("MultipleFactor")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Plan")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("Rounding")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("GasStationId", "NomenclatureId")
                        .IsUnique();

                    b.ToTable("CalcSheet");
                });

            modelBuilder.Entity("SP.Core.Model.CalcSheetHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("FixedAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<int>("GasStationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("MultipleFactor")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Plan")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19,4)");

                    b.Property<long>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rounding")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GasStationId");

                    b.HasIndex("NomenclatureId");

                    b.ToTable("CalcSheetHistory");
                });

            modelBuilder.Entity("SP.Core.Model.GasStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("AntiIcingPerYear")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AntiIcingSquare")
                        .HasColumnType("numeric");

                    b.Property<int?>("AverageTestPerMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("CashRegisterTapeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CashboxLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("CashboxTotal")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ChequeBandLengthPerDay")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("ChequePerDay")
                        .HasColumnType("numeric");

                    b.Property<int?>("ClientRestroomId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientRestroomTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientSinkTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientTambourTotal")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("CodeKSSS")
                        .HasColumnType("integer");

                    b.Property<string>("CodeSAP")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("CoffeeMachineTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("DayCleaningTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("DayRefuelingTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("DeepFryTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("DepartmentTotal")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DieselFuelPerYear")
                        .HasColumnType("numeric");

                    b.Property<int?>("DiningRoomTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("DishWashingMachineTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("FlagpoleTotal")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Fuel100PerYear")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Fuel92PerYear")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Fuel95PerYear")
                        .HasColumnType("numeric");

                    b.Property<int?>("FuelDispenserPostTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("FuelDispenserPostWithoutShedTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("FuelDispenserTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("FuelTrackPerYear")
                        .HasColumnType("integer");

                    b.Property<bool>("HasBakery")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCakes")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCentralWaterSupply")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasFuelBaseAutomation")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasFuelCardProgram")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasJointRestroomEntrance")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasKitchen")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMarmite")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSibilla")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSindyAnalyzer")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSpectroscan")
                        .HasColumnType("boolean");

                    b.Property<int?>("HasWell")
                        .HasColumnType("integer");

                    b.Property<int?>("ManagementSystemId")
                        .HasColumnType("integer");

                    b.Property<int?>("ManagerArmTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("MerrychefTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("NightCleaningTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("NightRefuelingTotal")
                        .HasColumnType("integer");

                    b.Property<string>("ObjectName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ObjectType")
                        .HasColumnType("integer");

                    b.Property<int?>("OperatorRoomFormatId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PersonnelPerDay")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("PersonnelPerShift")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonnelTotal")
                        .HasColumnType("integer");

                    b.Property<decimal?>("RailwayDeliveryPlanTotal")
                        .HasColumnType("numeric");

                    b.Property<int?>("RailwayTankPerYear")
                        .HasColumnType("integer");

                    b.Property<decimal?>("RepresentativenessFactor")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("RepresentativenessFactor3Quarter")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("ReservoirTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("RestroomTotal")
                        .HasColumnType("integer");

                    b.Property<decimal?>("RevenueAvg")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("SegmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceLevelId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServicingGasStationTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("SettlememtId")
                        .HasColumnType("integer");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShiftPerDay")
                        .HasColumnType("integer");

                    b.Property<int?>("StampTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("StationLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("StationNumber")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int?>("StationStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TradingHallArea")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("TradingHallOperatingModeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TradingHallSizeId")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkingPlaceTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkingRoomTotal")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterTapeId");

                    b.HasIndex("CashboxLocationId");

                    b.HasIndex("ClientRestroomId");

                    b.HasIndex("ManagementSystemId");

                    b.HasIndex("OperatorRoomFormatId");

                    b.HasIndex("SegmentId");

                    b.HasIndex("ServiceLevelId");

                    b.HasIndex("SettlememtId");

                    b.HasIndex("StationLocationId");

                    b.HasIndex("StationStatusId");

                    b.HasIndex("TerritoryId");

                    b.HasIndex("TradingHallOperatingModeId");

                    b.HasIndex("TradingHallSizeId");

                    b.ToTable("GasStation");
                });

            modelBuilder.Entity("SP.Core.Model.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("GasStationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("GasStationId", "Code")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("SP.Core.Model.Nomenclature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("NomenclatureGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("PetronicsCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PetronicsName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("UsefulLife")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("NomenclatureGroupId");

                    b.ToTable("Nomenclature");
                });

            modelBuilder.Entity("SP.Core.Model.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SP.Core.Model.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GasStationId")
                        .HasColumnType("integer");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("integer");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("GasStationId");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("SP.Core.Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .IsRequired()
                        .HasColumnType("character varying(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("SP.Core.Model.PersonTerritory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionalStructureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RegionalStructureId");

                    b.ToTable("PersonTerritory");
                });

            modelBuilder.Entity("SP.Core.Model.RegionalStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("RegionalStructure");
                });

            modelBuilder.Entity("SP.Core.Model.StageInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("GasStationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("GasStationId");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("PersonId");

                    b.ToTable("StageInventory");
                });

            modelBuilder.Entity("SP.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SP.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SP.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SP.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SP.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SP.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SP.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Log.ActionLog", b =>
                {
                    b.HasOne("SP.Core.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Log.ChangeLog", b =>
                {
                    b.HasOne("SP.Core.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Model.CalcSheet", b =>
                {
                    b.HasOne("SP.Core.Model.GasStation", "GasStation")
                        .WithMany("CalcSheets")
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Model.Nomenclature", "Nomenclature")
                        .WithMany("CalcSheets")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Model.CalcSheetHistory", b =>
                {
                    b.HasOne("SP.Core.Model.GasStation", "GasStation")
                        .WithMany()
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Model.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Model.GasStation", b =>
                {
                    b.HasOne("SP.Core.Master.CashRegisterTape", "CashRegisterTape")
                        .WithMany()
                        .HasForeignKey("CashRegisterTapeId");

                    b.HasOne("SP.Core.Master.CashboxLocation", "CashboxLocation")
                        .WithMany()
                        .HasForeignKey("CashboxLocationId");

                    b.HasOne("SP.Core.Master.ClientRestroom", "ClientRestroom")
                        .WithMany()
                        .HasForeignKey("ClientRestroomId");

                    b.HasOne("SP.Core.Master.ManagementSystem", "ManagementSystem")
                        .WithMany()
                        .HasForeignKey("ManagementSystemId");

                    b.HasOne("SP.Core.Master.OperatorRoomFormat", "OperatorRoomFormat")
                        .WithMany()
                        .HasForeignKey("OperatorRoomFormatId");

                    b.HasOne("SP.Core.Master.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId");

                    b.HasOne("SP.Core.Master.ServiceLevel", "ServiceLevel")
                        .WithMany()
                        .HasForeignKey("ServiceLevelId");

                    b.HasOne("SP.Core.Master.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlememtId");

                    b.HasOne("SP.Core.Master.StationLocation", "StationLocation")
                        .WithMany()
                        .HasForeignKey("StationLocationId");

                    b.HasOne("SP.Core.Master.StationStatus", "StationStatus")
                        .WithMany()
                        .HasForeignKey("StationStatusId");

                    b.HasOne("SP.Core.Model.RegionalStructure", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Master.TradingHallOperatingMode", "TradingHallOperatingMode")
                        .WithMany()
                        .HasForeignKey("TradingHallOperatingModeId");

                    b.HasOne("SP.Core.Master.TradingHallSize", "TradingHallSize")
                        .WithMany()
                        .HasForeignKey("TradingHallSizeId");
                });

            modelBuilder.Entity("SP.Core.Model.Inventory", b =>
                {
                    b.HasOne("SP.Core.Model.GasStation", "GasStation")
                        .WithMany("Inventories")
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Master.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Model.Nomenclature", "Nomenclature")
                        .WithMany("Inventories")
                        .HasForeignKey("NomenclatureId");
                });

            modelBuilder.Entity("SP.Core.Model.Nomenclature", b =>
                {
                    b.HasOne("SP.Core.Master.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Master.NomenclatureGroup", "NomenclatureGroup")
                        .WithMany("Nomenclatures")
                        .HasForeignKey("NomenclatureGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Model.Order", b =>
                {
                    b.HasOne("SP.Core.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Model.OrderDetail", b =>
                {
                    b.HasOne("SP.Core.Model.GasStation", "GasStation")
                        .WithMany()
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Model.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Model.Person", b =>
                {
                    b.HasOne("SP.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("AspNetUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Model.PersonTerritory", b =>
                {
                    b.HasOne("SP.Core.Model.Person", "Person")
                        .WithMany("PersonTerritories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Model.RegionalStructure", "RegionalStructure")
                        .WithMany()
                        .HasForeignKey("RegionalStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SP.Core.Model.RegionalStructure", b =>
                {
                    b.HasOne("SP.Core.Model.RegionalStructure", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SP.Core.Model.StageInventory", b =>
                {
                    b.HasOne("SP.Core.Model.GasStation", "GasStation")
                        .WithMany("StageInventories")
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Master.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SP.Core.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
